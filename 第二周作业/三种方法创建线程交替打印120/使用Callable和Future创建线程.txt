package World;

import java.util.concurrent.*;

class Hero{
    private static volatile int signal=1;
    static class ThreadA implements Callable<Integer> {
        public Integer call() throws Exception {
            while (signal<121){
                if(signal%3==1){
                    break;
                }
            }
            return signal;
        }
    }
    public static void main(String[] args) throws InterruptedException, ExecutionException {
        ExecutorService executor= Executors.newCachedThreadPool();
        ThreadA task1=new ThreadA();
        Future<Integer> a=executor.submit(task1);
        for(int i=0;i<=117;i+=3)
        {
            System.out.println("ThreadA "+(a.get()+i));
            System.out.println("ThreadB "+(a.get()+i+1));
            System.out.println("ThreadC "+(a.get()+i+2));
        }
    }
}/*使用Callable和Future创建线程.
......
其实这道题我失败了
怎么说呢
就是我确实了解这个callable和future是要返回一个数值的
但是我不能让其多次循环
也就是返回一次后就结束了
类似于break
就做不到交替输出到1至120;
(这道题也是卡了好几天，查也查不到.）
*/